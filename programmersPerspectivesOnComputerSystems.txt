一、计算机操作系统预览
1、bits信息上下文
	如何写自己的unix shell，动态存储分配包，甚至你自己的web server
2、程序被翻译成不同的形式
	理解并发的优势和边界：多核处理器的重要特点
	源文本->预处理器->修改源程序(text)->编译器(cc1)->程序集(文本)->重定位程序(二进制)->可执行程序(linker)
	{预处理阶段：头文件
	编译阶段：程序集中包含low-level机器码；high-level语言
	程序集阶段：程序集转换为 relocatable object program
	链接阶段：链接器处理库和程序集，生成可执行程序
	}
	GNU工程（GNU's Not Unix）：
3、理解编译系统如何运行
	优化性能：
	机器语言：IA32
	如何调节，是的编码器工作更佳
	C编码器在内存中存储数据列阵，且C程序如何运行的更佳有效率；
	理解link-time errors： linker表示不能解决a reference
	chapter7: 链接error
	避免安全漏洞：buffer overflow vulnerabilities
	编码程序、编码器、操作系统减少攻击的威胁
4、存储中处理器读取和解释器指令存储
	系统的硬件组织(硬件系统)：{CPU，ALU，PC：program counter，USB：universal serial bus}
	Buses：word size(4 bytes)
	I/O Devices:I/O设备；硬盘驱动，I/O bus & I/O device
	主存储器：DRAMs，IA32机器码
	处理器：program counter（PC）:word-size的存储器;CPU：运行主存储器的解释器指令；
	简单指令集模型（指令集架构）；ALU计算新数据和地址: Load,Store,Operate,Jump
	Direct memory access(DMA):
5、缓存非常重要
	系统花费时间移动information（系统设计的一个重要目的是使的copy操作越快越好）
	硬盘越大，访问速度越慢；同时寄存文件只有少数bytes信息；processor-memory gap继续增加；处理器操作速度加快的成本比主存储器要更低；
	缓存：L1 & L2 cache 硬件技术：SRAM{static random access memory}
6、存储器形成结构
	在处理器和大的慢的设备中插入更小、更快的存储设备，成为了通用思路；
7、操作系统管理硬件
	所有控制硬件的应用程序必须经过操作系统
	操作系统有两个目的：保护硬件被失控的应用使用；提供统一机器码的应用在多物理硬件中调用；
	Processes{processor,virtual memory{main memory,Files{I/O devices}}}
	操作系统跟踪所有的process状态信息{context,PC的当前值，寄存文件和主存储器的内容}
	Process context switching：进程上下文切换
	ThreadsThreads：每个进程包含很多处理单元「线程」，
	Virtual Memory: 虚拟地址空间，Program code and data{处理代码和数据；Heap，Shared Libraries,
	Stack,Kernel virtual memory} 复杂的交互系统在硬件和操作系统之间是被需要的；
	Files: bytes流；I/O设备，包括硬盘、键盘、显示器和网络；提供了应用varied I/O设备；使用不同的disk技术，代码可运行在不同的操作系统；
	简单和优雅的概念
8、系统使用networks（？？）与其他系统交互
	main memory--> network adaptor: local disk driver;
	系统可以被看作为硬件和软件的集合孤岛
	信息传输是网络的重要组成部分{system bus,memory bus,I/O bus}
	代理和服务器的交换类型是典型的网络应用；
9、重要议题
	concurrency & parallelism：并行「计算机架构上，三层描述」
		Thread-level concurrency:{uniprocessor system;多处理器系统；多核处理器}
		Instruction-level Parallelism: processors 可运行更快{superscalar processors}
		Single-Instruction,Multiple-Data(SIMD)parallelism{用于处理图像、声音和视频}
10、总结
	Files是I/O设备的抽象；VM是main memory和disk的抽象；Processes是processor、main memory和I/O devices的抽象；
二、程序架构和运行
1、表示和处理信息：
	1:信息存储
		编译器和run-time系统划分存储空间，以便更容易控制存储不同程序对象；
		十六进制、Words、Data Sizes、Addressing & Byte Ordering；
		Web Aside Data: more on bool algebra and bool rings
		Bit-Level 操作 in C
		Logical Operation in C
		Shift Operation in C： << 向右或向左移动bit类型	
	2：整数描述
		数学特性和机器层-implementations；
	3:整数计算
	4:浮点数
	5:总结
2、程序在机器层面的描述
	1：历史角度
	Intel Architecture 32-bit: Intel64 -> X86-64: 
	Advanced Micro Devices(AMD): 
	2：程序编码
	unix > gcc -O1 -o p p1.c p2.c
	机器码：被定义instruction of architexture： ISA（IA32 和 X86-64）
	ISA：指令集
	second： 内存地址：虚拟地址，提供了存储模型，体现非常大的byte排列；
	存储系统提供了硬件存储和操作系统的结合；
	program counter + integer register包含了八个名为locations storing 32-bit values；
	简单的程序指令只是基础的操作，例如：在寄存器中增加两个数字，传输存储和寄存器，或者条件分支到
	新的指令地址；编译器必须生成指令集用于补充程序产生数学表达估计、循环和procedure call舍返回；
	3：数据形式
	C描述：char，short，int，long int，loing long int，char *，float，double，long double
	intel：Byte，Word，Double word，-----，Single precision，Extended precision
	4：可达信息
	Operand Specifier：Results 可悲存储在寄存器或者内存中；不同的操作可分为三类：
	Immediate，Register，Memory；
	Data movement instructions：Address, Register,Operand Value
	MOV class由三个指令组成{movb,movw,movl: operate on data of size 1,2,4}
	5：数理逻辑
	Load Effective Address:整数代数操作
	unary & binary操作：
	Shift Operation: 
	讨论：
	special arithmetic operation：
	6：控制
	迄今为止：我们只记住了straight-line代码的行为；机器码提供两个基础的机制：基于测试数据的结果，要么修改控制流或者数据流
	数据依赖的控制流是更加general和更加通用的操作，因此我们将测试这个；机器码的指令能够使用jump指令集进行修改
	条件码：常用的condition code：Carry flag，Zero flag，Sign flag，Overflow flag；
	对比和测试指令集： SET instructions；
	Accessing the condition codes：设置single bytes{0~1};跳转到另一个的程序；条件转移数据；
	编译或反assembly是的任意选择；
	jump指令：在生成object-code文件，程序集决定了所有标记的指令的地址；编码jump目标做为跳跃指令的部分；
	：：direct jump-jump目标编码为指令的一部分；indirect jump-从寄存器或者memory地址中读取jump目标；
	".L1"标签：Conditional jump只能是direct
	在程序集代码中，jump目标使用符号标签；程序集和链接linker；
	PC relatives： 
	Most common constructs：simple conditional branches & loops and swith statements
	迁移条件分支：original code -> goto version -> assembly code
	Loops: {.L2: jg .L2}
	Conditional Move Instructions: 
	misprediction penalty:
	指令有两个操作：源寄存器或存储地址、目标寄存器
	不像unconditional instructions：operand length可以边编码为指令名；
	switch statements
	7：procedure
	数据的传递和分配&删除
	stack frame structure：
	Current frame{argument build area;saved registers,local variables and temporaries;Saved %ebp}
	Caller's frame{return address;argument [4n + 4] -- increasing address} 
	Earlier frames{stack "bottom"} 
	procedure Q使用本地变量存储不到寄存器中：对所有的local数据不足寄存器；array/structure引用；地址算子应用于局部变量，因此我们必须生成新的地址；
	相类似的，通过增加pointer可回收空间；
	转移控制：ret指令剔除栈中地址和跳到新的地址{执行call，call之后，ret之后}
	caller-save / callee-save
	recursive procedures: 栈提供正确的policy：分配局部存储当程序被调用时，当返回时解除分配；
	---------------------------------------------------------------------------------------------
	8：Array分配与Access
	9：Heterogeneous数据结构
	10：理解指针
	11：使用GDB debugger
	12：oom引用和缓存溢出
	13：X86-64 拓展IA32到64Bits
	14:浮点数程序的机器层表示
	15:总结
	---------------------------------------------------------------------------------------------
3、处理器架构
	1：Y86指令集架构
	2:逻辑设计和HCL（硬件控制语言）
	3：Sequential Y86 Implementations
	4:管线的通用规则
	5:管线Y86Implementations
	6:总结
4、优化程序性能
	有效程序需要一些典型特征：选择正确的算法集合和数据结构；优化执行代码{编译器的边界和能力}；
	C的特征「指针」；并行计算；
	在代码可实施和运行速度之间进行trade-off；
	算法层：插入排序时间
	编码层：很多低层优化减少了代码的可读性和模块化，使的程序脆弱和难以维护；
	挑战是保持一些优雅和可读性； 
	优化程序的性能：编码器必须知道计时信息能够决定使用多指令或者shifts和adds；
	指令集层的优化；
	Amdahl's law；提升一个系统的一个部分的性能对整个系统有多大影响；
	1：编译器的能力与限制
	memory aliasing；两个指针指向同一个地址；
	第一个优化blockers：程序严格限制编译器生成的优化代码的可能性；确保不会引入memory aliasing 
	第二个优化blockers：side effect ---- 编译器假设最坏的情况，并leave functions calls intact；
	编译器必须只应用safe优化项到项目中，保持功能一致；迁移为有效机器码；
	优化函数calls通过inline substitution；
	花费更多的精力用于书写编程，简化产生有效代码的编译器任务；
	2：表达程序表象
	cycles per element： CPE
	loop unrolling： 循环展开；   优化原理： 减少指令开销，内部流水线优化
	prefix-sum functions： 减少指令开销
	3:程序样例
	优化后的代码和优化前的代码解决的是优化问题；
	4:删除无效率循环(inefficiencies code)
	使用变量，删除重复性的操作；
	5:减少Procedure Calls:减少过程调用
	Move vec_length -> Direct data access: 减少获取length时间
	6:删除不需要的内存引用
	删除不必要的reading&writing of memory；Expressing relative performance{？？}
	7:理解现代处理器
	instruction-level parallelism: 指令层的并行
	latency bound： 延迟界限，当下一个操作需要上一个操作的结果----边界能限制程序性能；
	throughput bound: 原生计算处理器的函数单位容量；{overall操作：superscalar，out-of-order，instruction control unit[ICU]，execution unit[EU] <- instruction cache}
	branch prediction: 分支是否被选择和预测分支目标操作 
	load和store单元access memory通过data cache；
	speculative execution存在滞后性{misprediction}
	retirement unit：系列语义的机器码程序；寄存器文件包含了整数、浮点数、和更多的SSE寄存器；{先进先出队列} misprediction不会修改程序状态；
	最常用的用于控制操作交互的操作单元机制为register renaming；
	functional unit performance：单元函数性能
	processor operation的抽象模型：限制招致在图方面的critical paths{执行程序指令，lower bound}；
	从机器码层代码 -> Data-Flow Graphs: {
		Graphical representation of inner-loop code: read-only & write-only & local & Loop
	}
	其他的性能影响因素：
	https://www.zhihu.com/question/274071028/answer/3228007605
	性能限制：latency bound{延迟界限}、throughput bound{吞吐量界限，处理器功能单元的原始计算能力}
	内存指标：延迟{latency}和带宽{brandwidth} 缓存模块
	8:Loop unrolling
	循环展开
	基于reassociation transformation进行优化： 优化代码中的critical path{关键路径}
	9:增强并行性
	mutiple accumulators、reassociation transformation{结合律}
	SIMD
	10:优化Combinning代码的结果的总结
	用电量的考虑
	11:限制因素
	register spilling： 
	Branch prediction and misprediction penalties：不需过多关注可预测分支；Write Code Suitable for Implementation with Conditional Moves；
	12:理解内存表现
		load performance：
		store performance：
	13:performance improvement techniques： life in the real world
		从文件中读取每一个word并转化为小写
	14:发现和消除表现瓶颈
		program profiling：
		using profiler to Guide Optimization
		Amdahl’s Law：重要部分和加速度量决定了系统性能： 用于判断极限优化值{the cost of manufacturing razor blades}
	15:总结
		1、更有效的算法和数据结构是不能被编译器替代的；
		2、operations、latencies、单元函数运行时间可预测程序性能；
		3、loop unrolling、creating multiple accumulators、reassociation可挖掘指令集层的处理器并行；
		4、程序需要牵涉条件分支和与存储系统进行复杂交互的基础策略：使得分支更加可预测或使用conditional-data transfers；注意store和load操作（I/O操作；使用局部变量
		5、花费最多时间的程序模块优化，profiler工具是游泳的
		6、Amdahl’s Law提供了有效的测试内容
5、存储结构
	memory system是一个存储结构{不同的容量，costs，access times}；
	1:存储技术
	RAM{SRAM/DRAM}
	Accessing Main Memory:  Main memory <-memory bus-> I/O bridge <-System bus-> Bus interface{<->register file <-> ALU}
	a note on bus designs: --
	Disk Geometry: platters
	SSD 没有moving parts{}
	Storage Technology Trends: 
	2：Locality
	principle of locality: 硬件和软件系统设计与性能 -- temporal locality/spatially locality
	locality of references to program data: 指针序号的顺序问题
	Locality of Instruction Featches: 
	Locality的总结：程序引用相同的变量喜欢好的时域locality；程序 with stride-1 reference图案有着好的spatial locality；Loops有着好的时空locality respect to instruction fetches；
	3:内存结构
	storage tech. / Computer software: 
	Andrew File System(AFS)/Network File System(NFS)允许程序获取存储在远端网络服务器上的文件；
	Cache Hits，Cache Misses， Kinds of cache misses；-> cache management;
	存储结构概念： Exploiting temporal locality；Exploiting spatial locality；
	4:缓存内存
	Generic Cache Memory Organization / Direct-Mapped Caches{Selection && Line Matching} / 
	Caches block 是固定size的信息包在缓存和主存储（lower-level cache）；line在cache中的存储了block的存储器，valid bit和tag bits；set是一个或者更多line的集合；
	5:Cache友好型代码
	1、 make the common case go fast；2、在每一个inner loop中减少缓存misses的数量；--- 重复性的引用局部变量；stride-1引用好，因为内存连续；
	6:程序中缓存对性能的影响
	Rearranging Loops to increase spatial locality / Exploit Locality in Your programs 
	7:总结
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6、系统中运行项目       -688
	1:Linking: separate compilation: 理解linker有益于构建大型项目；理解linkers有助于避免危险项目错误；有助于理解language scoping rules
	linking是收集和合并不同code模块和数据进入到(加载进内存和执行的)单个文件；编译时间内，当源代码转译成机器码；加载时间，程序被加载进内存并且被加载器执行；运行时，通过应用程序运行；
	linker允许独立编译{解耦}；
	不考虑operating system,ISA,object file format链接的基础概念是相通的；
		编译Drivers
			shell激活操作系统的函数，叫做loader
		静态链接
			可运行的主要任务是：symbol resolution(定义和引用符号), Relocation（编译和集合产生的代码和数据段）
			对象文件仅仅是bytes块的收集器；blocks包含程序码；其他包含程序数据和包含数据结构(guide the linker和loader)
		Object Files： 
			relocatable object file，executable object file，shared object file；
			编译和集合产生relocatable object文件；链接产生可执行程序文件；
			交换object module(bytes)和object file(在disk上的object module)
		重新分配Object Files：relocatable object file
			.text: 编译程序的机器码
			.rodata: 只读数据
			.data: 初始化全局C变量
			.bss: 未初始化的全局C变量
			.symtab:符号表
			.rel.text:.text段
			.rel.data: Relocation信息，用于全局变量(被模块引用或者定义)
			.debug: 用于debug的符号表
			.line: 在line numbers和.text的机器码指令之间的映射；
			.strtab: 在.symtab和.debug之间的字符串表for符号表表
		字符和字符表
			Global symbols，symbols are external和其他模块中的变量；局部变量
			本地的链接符号与局部程序变量不一样；
			通过static，隐藏变量和函数名；
			名字是{points to the null-terminated string name}byte offset，value是symbol的地址；binding域表明了符号是局部还是全局的；
			linking with static libraries: 引用输入到链接器 -- 
			Relocation: Relocation sections and symbol definitions && Relocating symbol references within sections
				Relocation Entries / Relocating Symbol References
			Executable Object Files: 
			ELF 执行时设计为可简单加载进内存：segment header table
			Loading 和 linking shared libraries from applications：： Distributeing software，building high-performance web servers{
				网络服务器产生了动态内容，比如个性化网页、账户balances或者banner ads；
			}
			Postition-Independent Code(PIC): 共享库时使用多个运行进程共享相同的库代码和保存内存资源；{编译库代码，可被加载和运行在任意地址，
			而不用修改linker；}
			PIC data references：global offset table；运行时，全局变量通过GOT间接引用 -- lazy binding{GOT 和 procedure linkage table PLT}
			处理对象文件的工具：{
				AR 创建静态库，插入、删除、列出和精简成员
				STRINGS：所有的可打印包含对象文件的可打印字符串；
				STRIP：从对象文件删除符号表信息
				NM：列出对象的符号表在symbols
				SIZE：对象文件中的在符号表中定义的符号；
				READELF：显示对象文件的完整结构：包含所有的ELF头的编码信息；包括了SIZE和NM的功能；
				OBJDUMP:所有二进制工具的总成，

				UNIX： LDD：列出运行时可执行程序的所有依赖库	
			}
		字符精度
		重寻址
		执行Object文件
		加载执行对象文件
		使用Shared库动态链接
		从应用中加载和链接shared库
		独立于Position编码【PIC】
		处理Object文件工具

		LINKING：编译时静态库，运行时动态库；两个主要的链接器任务是符号精度；在对象文件的全局符号限于unique定义和重定向，对于ultimate内存地址的每一个符号；
		静态链接被编译驱动（例如GCC）激活；
		left-to-right 序列扫描：linkers使用解析符号引用是另一个导致link-time error的源头；
		加载图映射部分链接可执行进入内存和成为动态链接库；
		共享库作为PIC和被多进程在运行时调用，应用能够使用动态链接库用于加载、链接和获取函数和数据；
	2：异常控制流：每一个流传递称为control transfer，flow of control；-- Exceptional control flow（ECF）
		异常
			exceptional control flow通过硬件和操作系统补充异常流；
			异常是在处理器的状态中的变化，control flow的突然的变化；
			Exception Handling： 
				exception number：{
					处理器的设计者：除0，缺页，内存获取冲突，断点，计算溢出；
					操作系统核的设计者：system calls和额外的I/O设备信号；
				}
				system boot时间：计算机重置和通电；exceptional table；
				运行时：处理器检测发生的事情和决定相关异常数字；
			exception table base register：
				exception是类似于procedure call，但是有重要区分{
					procedure call：返回一个分支语句的句柄；
					处理器推一些额外的处理器状态到栈中，重启程序；
					控制流从个人程序转移到kernel，则被退出kernel栈而不是用户栈；
					exception处理句柄在kernel模式下运行；
				}
			异常类：
				打断(interrupts),Traps and system calls,Faults,Aborts,Linux/IA32 Faults and aborts,Linux/IA32 system calls,
		Processes:
			logical control flow: 提供了我们的程序有着处理器专用；
				程序内存定位和寄存器；
			私人地址空间i提供了专用存储系统；
				Concurrent Flows：逻辑控制流在计算机系统中有多种形式{Exception handlers，processes，signal handlers，threads，Java processes}
				run concurrently：
				multitasking： 进程执行了流{time slice}; time slicing
			private address space：
				x86 linux process{usual text,data,heap,stack segments}
				地址空间包含了代码，数据，kernel栈；
			user和kernel模式：
				为了操作系统kernel提供处理；处理器提供机制 应用可执行的指令集；
				process address space：
					kernel mode： supervisor mode ---- mode bit
					privileged instructions：halt这个处理器、变换mode bit或者初始化I/O操作
					不被允许直接应用地址空间中的reference代码和数据；
					进程运行应用代码在user mode中初始化{interrupt,fault,trapping system call}
			Linux提供了/proc文件系统，允许个人模式进程获取kernel数据结构内容；/sys文件系统，输出additional low-level信息关于系统buses和devices
			Context Switches：异常控制流的更高级的形式：：包括了objects的类型{general purpose寄存器}：floating-point寄存器，程序计数器，user's stack,
			status 寄存器，kernel栈和各种各样的kernel数据结构(比如页表，地址空间)，进程表包含了当前进程的信息，文件表包含了文件打开的信息；
			disk将提供一个相对长时间获取data；核处理指令集，在switch的初始部位；kernel模式处理指令
 		-------------------------cache pollution和exception control flow----------------------------------------------------------------------
		系统句柄报错Error
			fork函数：
			strerror函数：error-reporting函数
			error-handling wrappers:
		Process Control
			获取process IDs； 
			创建和结束进程{running;stopped;terminated;}； 
			Reaping Child processes：
				Determining the memobers of the wait set：pid>0,等于pid；；pid=-1，wait set由parent’s chidl进程；
				modifying the default behavior： WNOHANG,WUNTRACED,WNOHANG|WUNTRACED
				检查exit status of a reaped child
				Error Conditions：
				[waitpid]
			Putting Processes to Sleep： 进程休眠
			Loading 和 Running程序
				[使用fork，和execve运行程序]
		Signals：信号
			Unix signal：允许进程和核打断其他进程
				Signal Terminology：信号到目标进程----sending a signal & receiving a signal:: 已发出，但未收到的pending signal
			sending signal: process groups ID, seding signals from the keyboard;
				sending signals with kill function: 
				sending signals with the alarm function:
				安装和使用信号处理可以很轻微；
			receiving signals: default action
				进程终止；
				进程终止和dumps core；
			pending signals：
				blocked;
				not queued;
				system calls can be interrupted;	
			portable signal handling: 
			explicitly blocking and unblocking signals	
			Synchronizing flows to avoid nasty concurrency bugs
		NonLocal jumps

		处理流程的工具
			STRACE, PS, TOP, PMAP, /proc
		总结：
			Exceptional control flow（ECF）启用了计算机系统的all levels
			四个不同的exception类型：interrupts,faults,aborts,traps
			进程提供了两个功能：logical control flows给了每个程序假象(都是专用处理器)；私有地址空间提供了假象(程序专用main memory)
			signal process；	
	3:虚拟内存
		物理和虚拟地址
			adrress translation: 将虚拟地址转义为物理地址
			memory management unit(on CPU chip)
		地址空间
		VM是缓存的一个工具
			unallocated{未被分配的或者创建的页面} / cached{物理内存中缓存中的页面分配} / uncached{物理内存中的未在缓存中的页面分配}
			DRAM Cache 组织；
			Page Tables： 
				操作系统软件、MMU中的地址转义硬件和存储在物理内存中的数据结构
		VM作为内存管理的工具
			VM简化了链接和加载，代码和数据的共享和分配到应用的内存
			Simplifying linking：统一格式，生产fully链接的可执行程序，独立于ultimate location代码和数据；
			Simplifying loading：VM使得加载可执行程序和共享文件进内存变得简单；
			Simplifying sharing：独立的地址空间，使得每个程序都有自己的vm
			Simplifying memory allocation：VM提供了一个简单的机制用于分配增型内存；页面可以在物理内存中随机割裂；	
		VM作为内存保护的工具
			现在计算机系统必须提供控制获取内存系统的方法；提供了不同程序的私有内存；
		地址转义（address translation）
			集成caches和VM
			使用TLB(translation lookaside buffer)提速
			Multi-Level Page Tables
			Putting It together: End-to-End Address Translation
		样例分析：i7 / Linux Memory System
		内存映射
			Linux： memory mapping
				Regular file in the unix file system
				Anonymous file
				Shared Objects Revisited
				the fork Function Revisited
				the execve Function Revisited
				User-level Memory Mapping with the mmap function
		动态内存分配
			low-level mmap和munmao函数用于创建和删除VM的地址
			dynamic memory allocator保持着处理器的VM(heap)
				Explicit allocators
				Implicit allocators
				malloc & free函数
			Dynamic Memory Allocation & Allocator Requirements and Goals & Fragmentation & Implementation Issues & Implicit Free Lists
			Placing Allocated Blocks{first fit,next fit, best fit}
			Splitting Free Blocks: 
			Getting Additional Heap Memory
			Coalescing Free Blocks：       合并空闲块
			Coalescing with Boundary Tags: 合并Boundary Tags
		Putting it together： implementing a simple allocator ---- 实施一个简单的分配器
			基础常熟和Macros用于处理Free列表
			Freeing和链接块
			分配块
			Explicit Free Lists/Segregated Free Lists/
		Garbage Collection：
			常见的报错是无法释放块；
			GC basics： 有向reachability graph{root nodes and heap nodes};包含pointers into heap；地址是寄存器、栈上的变量和VM的read-write数据区的全局变化；
			conservative garbage collectors: 
			Mark&Serrp Garbage Collectors;???
		常见的C程序中的内存bug
			Dereferencing bad pointers: 
			reading uninitialized memory:
			Allowing Stack Buffer Overflows
			Assuming that Pointer and 指针指向的objects 是相同的size
			Making Off-by-One Errors
			Referencing a pointer替代指针指向的对象
			误解指针计算
			指向不存在的变量
			在free heap blocks中引用数据
			引入内存泄露： slow，silent killer
		总结
三、程序间的交互和通信
	1、系统级的IO操作
		Unix I/O
		打开和关闭文件
		读取和写入文件
		使用Rio package更加鲁棒地读写
		读取metadata
		sharing files
		I/O Redirection
		Standard I/O
		那些I/O函数可见
		总结
	2、Network编程
		Client-Server编程模型
		网络
		全球IP internet
		Socket 接口
		Web Servers
		TINY Web Server
		总结
	3、Concurrent编程：并发程序设计
		1、处理的Concurrent编程
		2、I/O 多复杂的Concurrent编程
		3、线程的Concurrent编程
		4、线程中的共享变量
		5、使用Semaphores同步变量
		6、使用线程实现并行
		7、其他的concurrency issues
		8、总结
四、错误handling
	1、Error handling in unix system
	2、Errorhandling wrappers