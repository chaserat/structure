https://github.com/KhronosGroup/Vulkan-Guide/blob/main/guide.adoc#logistics-overview
1、 Logistics Overview
	1、 what's vulkan： vulkan headers: https://github.com/KhronosGroup/Vulkan-Headers/tree/main
		相比于openGL[single thread per context;High-level driver abstraction,Layered GPU Control等]: 一直在active error handling； Full GLSL preprocessor and compiler in driver; 
		Vulkan:::: Memory allocation,Thread management,explicit synchronization,multi-threaded generation of command buffers->Thin Driver Explicit GPU Control--> Loadable debug and validation layers
		==> simple driver（基于已有的技术进行优化）=> efficient,predictable execution => Easier portability =>
		Validation and debuger layers => SPIR-V intermediate language(shade language flexibility) => Unified API across mobile nad desktop platforms => Multiple graphics, command and DMA queues;

		power and performance improvements && a premium on avoiding hitches

		使用help libraries: 
			使用maximum flexibility and control 
			uses utility libraries to speed development
			utility libraries and layers
			Games Engines fully optimized over vulkan
		开发者可选择使用vulkan生态的层级

	2、 what vulkan can do::https://github.com/KhronosGroup/Vulkan-Guide/blob/main/chapters/what_vulkan_can_do.adoc
		Graphics
		Compute
		RayTracing
		Video
		MachineLearning:::https://www.youtube.com/watch?v=_57aiwJISCI&t=5007s ****
		SafetyCritical

	3、 vulkan_spec:::: Core/Core with Extensions/Core With KHR Extensions[ratified extensions：：：：核心版本和KNR扩展]--规范
		https://registry.khronos.org/vulkan/specs/1.1-khr-extensions/html/vkspec.html
		https://registry.khronos.org/vulkan/specs/1.1-khr-extensions/html/vkspec.html#glossary
		文档约定：
			Vulkan核心接口进行定义，会影响Vulkan规范、头文件和相应的XML注册表
			批准：已批准和未批准的扩展之间的交互本身并未获得批准
			信息性语言： --> 信息性
		规范术语：
			must,required,should,Recommended,may和optional
		技术术语：
			引用规范：浮点运算、GLSL扩展指令、SPIR-V规范、H.264/265、AV1 bytes stream spec；、Vulkan注册表、文档和扩展、loader interface Architecture
		基础知识
			Vulkan架构和执行模型、API语法、队列、pipeline、数值表示、状态和状态查询以及不同类型的对象和着色器；
				主机和设备环境：整数可以按字节大小的粒度进行寻址、主机需要对32和64浮点类型的运行支持，满足浮点部分的范围和精度约束；主机上类型的表示和字节序必须与每个受支持的物理设备上相同类型的表示和字节序相匹配；
			执行模型：1/n设备->1/n队列，这些队列可以彼此异步处理工作；队列可支持以下类型的功能----图形、计算、视频解码、视频编码、受保护内存管理、稀疏内存管理和传输。
				队列操作：行动[动作执行可以更新内存中的值操作]、状态[更新命令缓冲区的当前状态，影响未来动作命令的操作]、同步[引入显式执行和内存依赖关系，对动作命令施加顺序约束]、间接[间接命令执行未直接记录在同一命令缓冲区中的其他命令]
			对象模型：Vulkan中的设备、队列和其他实体由Vulkan对象表示，在API级别，所有的对象都由句柄引用[可调度和不可调度]；可调度句柄是指向不透明类型的指针；句柄唯一[若不唯一，则销毁该句柄]
				对象生命周期[vkCreate,vkAllocate,vkDestroy,vkFree -> 池对象有助于提高分配和释放的性能]、
				[shader -> vkRenderPass,vkPipelineLayout,{当使用该对象的任何命令缓冲区处于待处理状态时，不得销毁以下Vulkan对象 --> 若销毁这些对象将使处于记录或可执行状态并使用这些对象的任何命令缓冲区变为无效状态}]
				以下Vulkan对象对于何时可以销毁特定限制::::隔离显示销毁
				外部对象句柄
			****应用程序二进制接口:
			命令语法和持续时间： 持续时间指调用命令和返回调用者之间的间隔；
				检索结果的生命周期，
			线程行为：<外部同步|外部同步参数列表: 同一时间只有一个线程在使用>
				vkCmd / commandBuffer / 
				--> 隐式外部同步参数
			有效使用：这些条件必须满足才能在应用程序中实现明确定义的运行时行为；
				使用验证 / 隐含的有效使用[指针、字符串、枚举类型、标志、结构类型、结构指针链、嵌套结构、扩展的有效使用] / 
			VkResult返回代码：返回状态信息、返回错误码
				成功代码 ----
			数值表示和计算
				浮点计算、浮点格式转换、浮点数、一般要求
			定点数据转换：
				从规范定点到浮点的转换
				从浮点数到规范化定点数的转换
			字符串表示
			常见对象类型
				偏移、范围、矩形、结构类型、API名称别名

		4、 初始化
			命令函数指针
				扩展物理设备核心功能
				从设备扩展扩展物理设备
			实例
		5、 设备和队列
			物理设备
			设备： 设备对象表示与物理设备的逻辑连接：每个设备都公开多个队列系列
				设备使用：创建队列，创建和跟踪各种同步构造，分配、释放和管理内存，创建和销毁命令缓冲区和命令缓冲池，创建、销毁和管理图形状态
				设备丢失：待处理和未来的命令执行可能失败并导致资源和后备内存变得未定义
				设备销毁
			队列：
				队列系列属性：
				队列创建：创建逻辑设备会创建与该设备关联的队列：：：：队列通过句柄表示VkQueue
				队列家族索引，队列优先级，队列提交，队列销毁
		6、 命令缓冲区
			命令缓冲区生命周期
				主命令缓冲区
					次命令缓冲区
			指令池：：：： 不透明的对象，内存从中分配，允许实现多个命令缓冲区之间分摊资源创建成本
			命令缓冲区分配和管理
			命令缓冲区记录
			命令缓冲区提交
			队列转发进度
			辅助命令缓冲区执行
			嵌套命令缓冲区
			命令缓冲区设备掩码
		7、 同步和缓冲控制
			命令之间存在一些隐式保证，vulkan公开了2忠显式同步机制
				栅栏[控制主机和设备之间的资源访问]、信号量[控制跨多个队列的资源访问]、活动[事件可用于控制单个队列中的资源访问]、管道护栏[控制单个队列内的资源访问]、渲染过程对象[同步框架，渲染通道对象可用于控制单个队列中的资源访问]
			执行和内存依赖性{显式执行依赖关系、内存依赖关系}[图像布局转换、管道阶段、访问类型、帧缓冲区区域依赖性、视图本地依赖性、设备本地依赖关系]、
			隐式同步保证：提供少量隐式排序保证，确保提交命令的顺序时有意义的
			栅栏：导入fence负载、
			信号量： 队列操作之间或队列操作与主机之间插入依赖关系
				信号量信号、信号量等待[先前的信号量信号操作和批次之间的内存依赖性]、等待操作的信号量状态要求、
				信号量的主机操作[查询当前计数器值、信号量达到特定的计数器值、特定计数器值的信号]、导入信号量负载、
			事件：
				用于在提交到同一队列的命令之间或主机与队列之间插入细粒度的依赖关系
			管道屏障：pipelinebarrier
			内存屏障：memorybarrier
				用于显式控制对缓冲区和图像子资源范围的访问；内存屏障用于在队列系列之间转移所有权、更改图像布局以及定义可用性和可见性操作；
				全局内存屏障[设计其执行时存在的所有内存对象的内存访问]、缓冲区内存屏障[buffer memeory barrier]、图像内存屏障[image barrier barrier]、队列系列所有权转移[释放源队列家族的独占所有权、获取目标队列系列的独家所有权]、
			等待空闲操作:等待给定队列的未完成队列操作完成
			主机写入顺序保证
			同步和多个物理设备
			校准时间戳：关联不同时间域的时间线上特定操作发生的事件
		8、 渲染过程 render process
			渲染过程对象
				表示附件、子过程及子过程之间的依赖关系的集合，描述附件在子过程中的使用方式
			渲染通道创建
				创建渲染通道vkCreateRenderPass
			渲染通道兼容性: 	
				帧缓冲区和图形管道是根据特定的渲染通道对象创建的；他们只能与该渲染通道对象或与其兼容的对象一起使用
			帧缓冲区
				渲染过程与帧缓冲区一起运行 -> 帧缓冲区表示渲染过程实例使用的特定内存附件的集合 
			渲染通道加载操作
				渲染过程加载操作定义渲染过程实例期间附件的初始值：
			渲染通道存储操作
				渲染过程存储操作定义了在渲染过程实例期间写入附件的值如何存储到内存中；存储操作仅更新渲染过程实例所定义渲染区域内的值；
			渲染过程多重采样解析操作：
				将多重采样附件中单个像素的采样值进行组合，并将结果存储到单个采样附件中的相应像素中；解析操作仅更新渲染过程实例所定义渲染区域内的值；
			渲染过程命令：
				应用程序每次以一个子通道的方式记录渲染过程实例的命令，方式是开始一个渲染过程实例，遍历子通道来记录该子通道的命令，然后结束渲染过程实例；
			常见的渲染过程数据竞争：
				常见情况：
					1、 从只读附件中抽样：读取和存储操作导致数据争用
					2、 资源之间的非重叠访问：加载和存储操作具有相当广泛的对齐要求
					3、 深度/模板和输入附件：未写入的方面必须处于只读布局中
					4、 同步选项：多种同步选项可用于同步渲染过程中对资源的访问
		9、 着色器
			着色器指定在图形和计算通道的相应阶段针对梅盖特顶点、控制点、镶嵌顶点、图元、片段或工作组执行的可编程操作；
				图形管道(顶点着色器)->操作面片的曲面细分控制和评估着色器->操作图元的几何着色器->操作由光栅化生成的片段着色器；在本规范中，顶点、曲面细分控制、曲面细分评估和几何着色器同城预光栅化着色器阶段；->计算管道仅包含计算着色器阶段；着色器可读取输入变量、也可读取和写入输出变量；输入和输出变量可用于在着色器阶段之间传输数据，或允许着色器与执行环境中存在的值进行交互，同样执行环境提供描述功能的常量；
			着色器对象：每个对象代表一个单独编译的着色器阶段，可以选择性地与一个或多个其他阶段链接
				着色器对象可以从以(SPIR-V)提供地着色器代码创建，或者以特定于物理设备地不透明，实现二进制格式创建；
				二进制着色器代码：
				二进制着色器兼容性
				绑定着色器对象
				设置状态：动态状态设置命令
				与pipeline进行交互
				着色器对象销毁
			着色器模块：SPIR-V格式
			绑定着色器：binding shader
			着色器执行：pipeline地每个阶段，着色器地多个调用可以同时执行，；着色器调用地完成顺序可能与应用程序绘制或分派他们的图元的顺序不同，但是，片元着色器输出按光栅化顺序吸入附件；
				着色器中之；OpTerminateInvocation
			着色器内存访问顺序：着色器读取或写入顺序很大程度上是不确定的
			着色器输入和输出
			顶点着色器：顶点着色器执行[对于由绘制命令指定的每个顶点，必须至少执行一次顶点着色器；]
			曲面细分控制着色器：读取应用程序提供的输入补丁并生成输出补丁；
				曲面细分控制着色器执行：针对补丁中的每个输出顶点调用一次
			曲面细分评估着色器
				曲面细分评估着色器执行：曲面细分器生成的每个唯一顶点
			几何着色器：几何着色器执行[着色器可以请求几何着色器运行多个实例]
			片段着色器：独立片段
			计算着色器：
			光线生成着色器：使用流水线追踪光线指令，执行光线追踪查询并处理结果
				光线生成着色器执行：
			交叉着色器：通过生成可读取的属性与任意命中和最近着色器进行通信，交叉着色器无法读取或修改光线有效载荷
				交叉着色器执行:AABB
			任意命中着色器-任意命中着色器执行
			最近命中着色器-执行
			Miss Shaders: 可访问光线的有效负载、通过管道跟踪光线指令跟踪光线，但无法访问属性
				着色器执行失败
			可调色着色器：执行
			Interpolation Decorations： 被光栅化的图元指定的值插入的
			静态使用：
				OpVariable: 全局对象
			范围(Scope)：
				作用域实例；跨设备、设备、queue group、command
			Group Operations:
				basic group operations, Vote Group Operations,Arithmetric Group Operations, Ballot Group Operations, Shuffle Group Operations, Shuffle Relative Group Operations, Clustered Group Operations, Rotate Group Operations
			Quad Group Operations:
				四元组操作：特殊类型的组操作，对四元作用域实例进行操作；静态执行的片段着色器；
			Derivative Operations
			Helper Inovations：执行导数或四元组操作时，可能会生成额外的调用以确保结果正确；
			Cooperative Matrices:
				SPIR-V类型；矩阵的存储和计算分布在作用域实例中的调用中，提供了自由度；
		10、 管道：：：：Vulkan命令指定绘制的几何对象或要执行的计算工作，而其他命令则指定控制各个管道阶段如何处理对象的状态:::: 输入组装顶点形成几何图元
				计算顶点的位置和属性；若支持镶嵌和/或几何着色器，可从单个输入图元生成多个图元，可在此过程中更改图元拓扑或生成其他属性数据；图元被裁剪到裁剪体积以准备进行光栅化->生成一系列与帧缓冲区区域相关的片段[确定是否将生成的值写入帧缓冲区，片段着色确定要写入帧缓冲区附件的值]；计算管道[与图形管道分开的管道，1、2、3D工作组运行，可读取和写入缓冲区和图像内存]；
			创建多个管道
			计算管道：：单个静态计算着色器阶段和管道布局组成
			图形管道：：多个着色器阶段、多个固定功能管线阶段和一个管线布局组成
				图形管道阶段的有效组合：曲面着色器阶段、几何着色器、片段着色器、固定功能曲面细分器始终存在
			射线追踪管道：：多个着色器阶段、固定功能遍历阶段和管道布局组成
			管道破坏(pipeline destruction)::
			管道衍生物：：从父管道创建的子管道；使用父级作为起点来更便宜地创建它们
			管道缓存：：允许管道构建地结果在管道之间和应用程序运行之间重用
				创建管道缓存，合并管道缓存，检索管道缓存数据，管道缓存头，销毁管道缓存，
			专业化常量
				SPIR-V模块地常量，VkPipeline
			流水线库
				定义一组可以链接到其他管道地管道状态；对于光线追踪管道，包括着色器和着色器组；必须根据与其链接地管道来维护管道库地生命周期；
			管道绑定
				将创建出来地管道绑定到命令缓冲区
				----应用程序可以同时使用管道和着色器对象，管道和着色器对象之间地交互在与管道地交互中进行了描述
			动态状态
				管道对象被绑定时，任何未指定未动态地管道对象状态都将应用于命令缓冲区状态；
			管道属性和着色器信息
				创建管道时，其状态和着色器将被编译未零个或者多个设备专用的可执行文件
		11、 内存分配
			主机内存：：：：实现所需的用于非设备可见存储的内存
			设备内存：：可见存储，如图像或缓冲区对象额内容
				设备内存属性{描述了可用的内存堆和内存类型}、设备内存对象、设备内存分配、Win32 external 内存；文件描述子外部存储器、主机外部存储器；设备组内存分配[	该结构包含标志和一个设备掩码，控制将分配多少个内存实例]、不透明捕获地址分配[请求特定设备地址进行内存分配]、释放设备内存、主机访问设备内存对象[内存对象必须是可映射的]、惰性分配内存[实现延迟提供，实际提交的内存大小可能小到0或大到请求的大小，随着需要额外内存和单调增加]、受保护的内存[内存、资源、命令缓冲区、设备队列、队列提交、队列操作]、对等内存特性[对等内存是分配给给定物理设备的内存；设备可能不支持某些读取和写入对等内存的方式]、不透明捕获地址查询、
		12、 资源创建： 缓冲区和图像，缓冲区提供对原始字节数组的访问、二图像可以是多维的，且可能具有相关的元数据；加速结构和微图使用蝗虫去作为不透明数据结构的后备存储；
			缓冲区： 数据的线性数组、通过描述符或某些命令将它们绑定到图形或计算通道，或直接将它们指定为某些命令的参数；
			缓冲区视图：表示缓冲区的连续范围和用于解释数据的特定格式；用于使着色器能够使用图像操作访问缓冲区内容；
				缓冲区视图格式特性
			图像-图像布局-图像试图
				图像表示多维数据数组，可用于各种目的(附件、纹理)，通过描述符集将它们绑定到图形或计算管道，或直接将它们指定为某些命令的参数；
				图像格式特征--图像Mip级别大小调整[完整的mipmap链是完整的mip级别集，从提供的最大mip级别到最小mip级别大小]
				图像存储在内存中与实现相关的不透明布局中；每个布局对于使用该布局的图像子资源从一个布局转换到另一个布局；   图片布局匹配规则：所访问的图像子资源的布局必须全部与通过控制这些访问API指定的布局完全匹配；
				图像视图：表示图像子资源的连续范围并包含其他元数据；视图必须在兼容类型的图像上创建，必须表示图像子资源的有效子集；图像视图格式功能<>
			加速结构：不透明的数据结构，由实现构建，用于更高效地对提供地集合数据执行空间查询；顶层加速结构中地每个实例都包含对底层加速结构地引用以及实例转换和索引着色器绑定所需的信息。
			微地图：：：：微图是由实现构建的不透明数据结构，用于对要包含在加速结构中的子三角形数据进行编码；
			资源内存关联-资源共享模式-内存别名
				一旦绑定-内存绑定在资源的整个生命周期内都是不变的；
				资源共享模式：：：：缓冲区和图像对象在创建时会使用共享模式来控制如何从队列访问它们
					外部资源共享-只能在对底层内存拥有独占所有权的Vulkan实例中访问资源；{
						从源实例或API释放独占所有权，
						使用信号量或隔离栅确保释放操作已完成，
						获取目标实例或API的独占所有权
					}
				内存别名：某个分配范围同时绑定到多个资源，该分配范围是别名；通过稀疏内存绑定，或者通过使用外部内存句柄导出和导入机制将内存绑定到多个Vulkan实例或外部API中的资源；可有助于减少应用程序的总设备内存占用
					资源内存重叠：传输命令仅访问由传输命令范围指定的内存位置
		13、 采样器：： 表示图像采样器的状态，实现使用它来读取图像数据并未着色器应用过滤和其他转换
			YCbCr转换：：：：
		14、 资源描述符：不透明的数据结构，表示着色器资源{缓冲区、缓冲区视图、图像视图、采样器或组合图像采样器}
			描述符类型：：存储映像[图像视图与图像资源关联的描述符类型，可对其执行加载、存储和原子操作]、采样器[控制对采样图像执行的采样操作的行为]、采样图像、组合图像采样器、统一纹素缓冲区[紧密堆积的一维线性纹素阵列]、存储纹素缓冲区[可对其执行图像加载、存储和原子操作]、存储缓冲区[可执行加载、存储和原子操作的各种成员的结构]、统一缓冲区[可执行加载操作的各种成员的结构]、动态统一缓冲区[缓冲区偏移量]、动态存储缓冲区[初始更新描述符集时计算的基本偏移量将被添加到动态偏移量]、输入附件[用于片段着色器中的帧缓冲区本地加载操作]、加速结构[用于光线遍历的着色器中检索场景几何体，着色器对内存具有只读访问权限]
			描述符集：：：：不透明对象，包含一组描述符的存储空间，其中描述符的类型和数量由描述符集布局定义；
				描述符集布局[描述符集布局对象由0或多个描述符绑定的数组定义]、管道布局[管道布局访问管道中的描述符集]、描述符集的分配、描述符集更新、描述符集绑定、推送描述符更新[分配描述符集将其绑定到命令缓冲区，应用程序可将描述符更新记录到命令缓冲区]、使用描述符更新模板推送描述符更新、推送持续更新[管道布局定义着色器推送常量，通过Vulkan命令而不是通过写入内存或复制命令进行更新]、
			物理存储缓冲区访问：查询可在着色器中访问缓冲内存的64位缓冲设备地址值；
		15、 着色器接口--
			着色器输入和输出接口：内置变量和用户定义变量，每类都有一组不同的匹配标准
				内置接口块[明确声明、被认定BuilIn装饰、表单对象类型、在其顶级成员为内置函数的块中声明]、用户定义变量接口、接口匹配、位置分配、组件分配
			顶点输入接口：顶点阶段存在于管道中时，顶点着色器输入变量与顶点输入属性形成接口；OpEntryPoint用于存储类列出的顶点着色器输入变量Input构成了顶点输入接口；为了实现接口匹配：未使用Component修饰符声明的变量将被视为Component修饰符为0；
			片段输出接口：：片段着色器输出与渲染过程实例定义的输出附件形成一个接口，片段着色器输出变量通过location和component装饰与指定的颜色附件进行匹配；
			片段瓦片图像接口：：修饰的片段着色器图块图像变量与Location渲染过程实例定义的颜色附件形成接口；
			片段输入附件接口：：片段输入附件接口--片段输入附件兼容性
			光线追踪管道接口：：光线追踪管线可比其他管线具有更多的阶段，每个阶段有多个实例，且阶段间有更多动态交互，但仍具有遵循与其他管线中着色器阶段之间的接口结构；三种阶段间接口变量：{
				射线有效载荷包含射线整个生命周期内跟踪的数据，
				点击属性包含有关特定点击在处理期间的数据，
				可调用数据，用于将数据传入和传出可调用着色器
			}
			着色器资源接口：：：：
				推送常量接口-输入为OpTypeStruct，带有Block装饰，Offset使用、ArrayStrider和MatrixStride装饰明确布局，如偏移量和步幅分配中指定的那样；
				描述符集合接口：：：：着色器变量，StorageBuffer这些变量由Uniform管道的着色器入口点静态使用
				{存储图像、采样图像、统一缓冲区、存储缓冲区{均匀纹理、存储纹理}、加速结构}、描述符集和绑定分配、偏移和步幅分配、
			内置变量：：：：内置变量BuildIn--
		16、 图像操作：：：：
			图像操作概述
				纹素坐标系统、
			换算公式
				RGB到共享指数的转换、RGB共享指数
			纹素输入操作
				验证操作{说明/采样器/图像验证 || 坐标验证 || 立方体贴图边缘处理 || 稀疏验证 || 布局验证，
					格式转换[压缩格式,数量进行转换]，
					特克塞尔替换，
					深度比较[深度/模板格式]，
					转换为RGBA，
					组件混合[混合可以重新排列纹素的成分，或者0|1替代任何成分]，
					稀疏居住地[结构包含驻留代码、隐式重构]，
					色度重建，---- Texel过滤
					Y'CbCr转换
				}
			纹素输出操作
				验证操作:[格式验证{输出格式和类型验证、整数纹素坐标验证、稀疏纹素操作、Texel输出格式转换}、类型验证、坐标认证、稀疏认证]
				Texel输出格式转换
			规范化纹素坐标操作[投影、立方体贴图面选择和变换、坐标转换、导数变换、比例因子-LOD操作和图像级别选择]
			非规范化的纹素坐标操作：：整数纹素坐标操作
			图像样本操作：：Wrapping operation、Texel Gathering、Texel Filtering、
			图像操作步骤-处理
			图片查询指令：：图像属性查询、LOD查询
		17、 查询
			查询池
			查询操作
			遮挡查询
			管道统计查询
			时间戳查询
			性能查询
			变换反馈查询
			结果状态查询
			视频编码反馈查询
		18、 清除命令
			清除渲染过程实例之外的图像
			清除渲染过程实例内的图像：清除渲染过程实例中的一个或多个颜色区域和深度/模板附件
			清除值： VkClearValue
			填充缓冲区:: vkCmdFillBuffer
			更新缓冲区:: 命令缓冲区中以内联方式更新缓冲区数据
		19、 复制命令::::所有的复制命令都被看作"传输"操作
			在缓冲区之间复制数据-在缓冲区对象之间复制数据
			在镜像之间复制数据-在图像对象之间复制数据
			在缓冲区和图像之间复制数据----数据可以在缓冲区和图像之间复制，应用程序定义的偏移量之间加载和存储数据
			带缩放的图像副本：：：：将源图像的区域复制到目标图像中，可能执行格式转换，任意缩放和过滤；
			解析多重采样图像：：：：将多重采样彩色图像解析为非多重采样彩色图像
		20、 绘图命令-引发图形管道中的工作；每次绘制由0/多个顶点&0、多个实例组成，这些顶点和实例由设备处理并组装成图元；
			原始拓扑：：：：连续顶点如何组织成图元，决定图形管道开头使用的图元类型；管道后期阶段的有效拓扑由曲面细分或几何着色改变，并取决于这些着色器的执行模式；[顶点、顶点数、挑衅顶点、原始边缘、邻接边、清盘顺序]
				拓扑类、点列表、行列表、线条、三角形列表、三角形条带、三角扇、相邻的行列表、相邻的线条、具有邻接关系的三角列表、相邻的三角形条带、补丁列表
			原始顺序：：：：图元顺序在图形管道的各个阶段中执行
				提交顺序
			可编程图元着色：：：：非索引绘制命令向顶点着色器呈现顺序vertexIndex | 索引绘制命令从索引缓冲区读取索引值
		21、 固定功能顶点处理：顶点通过可配置状态进行控制，作为逻辑上不同的图形管道阶段
			顶点属性-变量接收通过绘制命令从一个或多个传输的顶点属性数据
				属性定位和组件分配、
			顶点输入描述：：：：指定顶点输入属性和顶点输入绑定描述作为图形管道创建的一部分
			实例渲染中的顶点属性除法：：：：该结构控制在启用实例渲染时如何将顶点属性分配给实例
			顶点输入地址计算：每个属性的地址vertexIndex可计算instanceIndex
		22、 镶嵌-tessellation::::曲面细分控制着色器-固定功能曲面细分器生成[相对应的多个基元]-曲面细分评估着色器转换曲面细分面片的顶点
			镶嵌器----曲面细分器将使用每个输入面片生成一组新的独立图元(点、线或三角形)|这些图元是通过曲面细分控制着色器写入的每个面片的外部和内部曲面细分级别对几何图元(矩形或三角形)进行细分而逻辑生成的；
				曲面细分执行模式：Triangles、Quads & IsoLines | VertexOrderCw & VertexOrderCcw | PointMode | SpacingEqual、SpacingFractionalEvent & SpacingFractionalOdd | OutputVertices
			曲面细分器补丁丢弃：：：：若任何相关的外部镶嵌级别小于等于0，则会丢弃该补丁
			镶嵌器间距：：：：每个细分级别用于确定细分相应边缘所用的段数和间距
			曲面细分基元排序：：：：由于镶嵌产生的图元与图元顺序有关，对相对顺序几乎没有提供保证
			曲面细分器顶点缠绕顺序：：：：逆时针 - 顺时针
			三角形镶嵌：：：：镶嵌原始模式为Triangles--每个三角形中顶点的顺序在整个域中时一致的，如Tessellator顶点binding 顺序中所述；
			四边形镶嵌：：Quads，将矩形细分为覆盖原始矩形面积的三角形集合；
			等值线镶嵌-IsoLines
			曲面细分点模式-拓扑类似于点列表，为每个输入图元生成点的顺序未定义
			曲面细分管道状态----指向结构的指针
		23、 几何着色：：：：由单个输入基元组装而成的一组顶点及相关数据进行操作，发出0|多个输出基元及每个输出基元所需的一组顶点及相关数据
			几何着色器输入基元----访问图元中的所有顶点，顶点数据以输入数组的形式呈现给着色器
			几何着色器输出基元----生成图元：点、线条带或三角形带每个几何着色器必须只包含一个输出图元模式；
			多次调用几何着色器----可为每个输入基元多次调用几何着色器(几何着色器实例化)
			几何着色器基元排序----几何着色器生成的图元的相对顺序提供有限的保证，因为它们与图元顺序有关；
				实例化几何着色器，从每个输入图元生成的输出图元将传递到后续管道阶段，使用调用号按从小到大的顺序对图元进行排序
				处理阶段后传递到后续管道阶段
		24、 固定功能顶点后处理
			变换反馈：预光栅化着色器阶段中最后一个着色器的定点输出可以写入绑定到命令缓冲区的一个或多个变换反馈缓冲区；
			平面着色：平面着色意味着为土元所有的定点分配相同的输出值；
			图元裁剪：图元根据剔除体积被剔除，然后被才见到裁剪体积中；
			剪辑着色器输出----顶点输出属性被裁减，裁剪体积内的定点关联的输出值不受裁剪影响；但是，如果裁剪了图元，则分配给裁剪产生的顶点的输出值也会被裁剪；
			坐标变换----剪辑坐标由着色器执行产生
			控制视口
		25、 栅格化：将图元转换为二维图像的过程：每个离散位置都包含了[深度、颜色或其他属性]
			光栅化之前丢弃图元： 图元在光栅化之前由管道中的最后一个活动着色器阶段处理后被丢弃
			控制用于光栅化的顶点流---- last pre-rasterization shader stage are directed to vertex stream zero
			光栅化顺序--片段操作；混合、逻辑运算和颜色写入 -> 子通道中每个图元的这些操作的执行是按照图元顺序进行的
			多重采样对所有基元进行抗锯齿处理；该技术在每个像素上对所有的基元进行多次采样；每个帧缓冲区附件中的每个样本都存储颜色、深度和/或模板值，一边每个片段操作独立应用于每个样本；
			片段着色率：：：：允许应用程序控制给定片段着色器调用的着色率pFragmentShadingRates
			样本着色：：：：可用于指定每个片段要处理的最小唯一样本数；片段着色器入口点静态使用BuildIn带有或修饰的输入变量；若片段调用的数量少于覆盖的样本数量，则实现可以以任何方式将这些样本包含在片段着色器调用中，只要覆盖的样本至少被着色一次，且每个非辅助低矮用覆盖至少一个样本；
			重心插值：：：：fragmentShaderBarycentric；插值修饰可于片段着色器输入一起使用，以知识修饰的输入在片段中没有关联数据。
			积分：：：：通过生成一组以点为顶点为中心的正方形碎片来绘制点；{
				几何着色器、曲面细分评估着色器、顶点着色器
				基本点光栅化----该点顶点的精确、未四舍五入的帧缓冲区坐标
			}
			线段：：：：线段光栅化选项由VkPipelineRasterizationLineStateCreateInfoKHR结构控制
				基本线段光栅化----光栅化线段将生成与以线段为中心的矩形相交的片段
				Bresenham线段光栅化::::非严格线条可能遵循非抗锯齿线条的光栅化规则
				线点画(Line Stipple)：：：：
				Smooth lines: 线条被视为使用与线条相同几何形状的矩形
			多边形：多边形由三角形带、三角形扇面或一系列独立三角形分解而成；基本多边形光栅化，多边形模式，深度偏差[多边形光栅化生成的所有片段的深度值都可以通过单个深度偏差值进行偏差(偏移)o针对该多边形进行计算]
		26、 片段操作-经过一系列操作来确定片段着色产生的值是否或如何写入帧缓冲区
			丢弃矩形测试
			剪刀测试：：将片段覆盖的每个样本的帧缓冲区坐标与等于片段的索引处的scissor矩形index进行比较
			样例模板测试
			片段着色::--样本掩码、片段着色器图块图像读取、深度替换、模板引用替换
			多重采样覆盖--多重采样计算
			深度和模板操作--控制深度边界测试、 模板测试和深度测试的管道状态
			深度界限测试--深度界限比较
			模板测试--模板测试{正面模板状态和背面模板状态}
			深度测试--[深度限制和范围调整、深度比较、深度附件写入]
			样本计数--使用查询池条目来跟踪通过所有每个片段测试的样本数量；
			覆盖率降低：：：覆盖率缩减获取片段的覆盖率信息并将其转换为片段覆盖的每个像素中每个颜色样本的bool覆盖率值
				像素覆盖范围[总片段覆盖率掩码中提取每个像素的覆盖率]
				颜色样本覆盖率[确定与该像素相对应的每个单独颜色样本的覆盖范围]
		27、 帧缓冲区
			混合：：混合针对片段覆盖的每个颜色样本执行，而不是仅针对每个片段执行一次
				混合因子、dual-source blend[双源混合]、混合操作
			逻辑运算：：：：可以启用片段颜色值与帧缓冲区附件中现有值之间的逻辑运算；
			颜色写入掩码：：ColorWriteMask
		28、 调度命令：：Dispatch 引发计算管道中的工作；将任何调度命令记录到命令缓冲区之前，必须将计算通道绑定到该命令缓冲区
		29、 稀疏资源--Vulkan中的资源必须完全且连续地绑定到单个对象，必须在使用资源之前完成，且在整个生命周期内绑定是不可变的；附加功能:{可非连续分配、可在生命周期重新绑定到不同的内存分配、可生成描述符并与内存绑定正交使用}
			稀疏资源特征：：：：sparseingBinding功能开启
				资源可绑定到某个定义的粒度；无论实际访问的区域如何，整个资源在使用之前必须绑定到内存；没有定义图像区域到内存偏移的特定映射，即每个纹素在内存中对应的位置都是依赖于实现的；
				Sparse Residency: 资源在设备上使用之前不必完全绑定到内存；图像具有规定的系数图像块布局，允许特定偏移量；
			稀疏缓冲区和完全驻留映像
				VkBuffer和VkImage对象都可以看作是地址空间的线性区域；
					稀疏缓冲区和完全驻留图像块大小
			稀疏部分驻留缓冲区
				允许部分驻留；缓冲区的某些区域可以在设备使用期间解除绑定；
			稀疏部分驻留映像
				管理图像子资源或稀疏图像块粒度的驻留；
				访问未绑定区域 | Mip Tail Region
				Legend：：：： Image Pixel Data / Sparse Memory Block / Mip Tail Data
				标准稀疏图像块形状 / 自定义系数图像块形状 / Multiple Aspects[
					Depth, Stencil, Metadata
				]
			稀疏内存别名
				对别名内存的写入未正确保护以防止访问不同的别名，则对别名内存的所有访问都将产生未定义的结果
			稀疏资源实施指南
				设备虚拟地址[sparseBinding | sparseResidency; 进程不得访问另一个进程的内存，读取返回未定义的值] / 绑定内存[报告的字节大小size必须大于或等于完全填充资源的所需的物理内存量] / 绑定元数据内存[ 稀疏图像的所有元数据都具有其自己的稀疏属性]
			稀疏资源API{
				物理设备特性、物理设备稀疏属性、稀疏图像格式属性、稀疏资源创建、系数资源内存需求[缓冲区和完全驻留映像、部分常驻图像、稀疏图像内存要求]、绑定资源内存[VkDeviceMemory,vkFreeMemory]
			}
		30、 窗口系统集成(WSI)
			WSI平台、WSI表面、直接在显示设备上呈现、查询WSI支持、表面查询、全屏独占控制、设备组查询、现在等待、WSI交换链、Hdr元数据
		31、 延迟主机操作：：：：线程池来协调昂贵的主机命令的执行
			请求延期：：：：
				不得访问外部同步参数/指针参数不得被修改/不得修改可通过命令读取的指针参数的内容/不得读取可通过命令写入的指针参数的内容/vulkan对象参数不能作为外部同步参数
			延迟主机操作API
				VkDeferredOperationKHR
					isCompleted
					proccessing
					如果当前operation当前加入到任何线程，则此命令返回的值可能会立即过时
		32、 加速结构：：：：实现用来在光线追踪查询期间遍历场景几何体时有效管理场景几何体的数据结构；应用程序负责分配、销毁、执行构建或更新以及同步光线追踪查询期间使用的资源
			加速结构：：：
				几何：三角形或轴对齐的边界框
				顶层加速结构：：：： 实例数组的不透明加速结构；引用此结构的描述符或设备地址是遍历的起点
					加速结构构建命令：
						top-level
							Transform and shading information -> Bottom-Level Acceleration Structure
				底层加速结构：：：：集合阵列的不透明加速结构
				加速结构更新规则：
					API定义了两种类型的操作来从几何图形生成加速度结构：
						构建操作用于构造加速结构
						更新操作用于修改现有的加速结构
				非活动基元和实例
					加速结构允许使用特定的输入值发出非活动原话或实例的信号
				构建加速结构：：任何构建所使用的任何加速结构内存或临时内存之间也不能有任何内存别名
				复制加速结构：存在一个附加命令，用于复制加速结构而不更新其内容；可以压缩加速结构对象以提高性能；复制之前，必须查询生成的加速结构的大小；
			主机加速结构操作[Host Acceleration Structure Operation]
		33、 微地图Micromap
			微地图：：加速结构存储和组织用于光线追踪的几何体，尤其对于三角形；微图围绕与细分微三角形相对应的值图组织这些数据；||||  不透明度微图是一种存储信息来控制交叉不透明度的微图，如涉嫌不透明度微图所述；
				构建微地图，复制微图，Host Micromap operation
			主机微图操作
		34、 射线遍历：射线遍历过程识别并处理射线与加速结构中的几何图形之间的交点
			射线相交候选点确定：：存储在实例中的变换矩阵必须是可逆的；多个实例有一条射线香蕉，则射线到实例空间的变换按照这些实例在顶层加速结构中遇到的顺序不变；
				Watertightness：：
					shared vertex / the same winding order in each triangle have a shared edge defined by those vertices
			射线相交剔除：：不同的剔除操作之间没有特定的顺序依赖性
				polygon rasterization: 决定三角形基元是back- 或 front- facing；基元可以基于该结果进行culling
			Ray Opacity Culling: 光线不透明度剔除[非不透明几何体则需要由着色器代码确认或丢弃；交叉候选体可根据不透明度进行剔除]
				射线不透明度微图：：加速结构中的几何形状可能具有与之相关联的不透明度微图，以提供更细粒度的不透明度信息；
				----该编码在空间上是连贯的、纯粹层次化的，并且允许重心地址和索引值之间的位并行转换；
			射线相交确认：：相交几何体的不透明度以及他是三角形还是AABB，候选交点会进一步处理以确定最终的命中结果；
				AABB交叉候选，三角形和生成的交叉候选点[对于三角形和生成的交点候选，可根据交点的不透明度执行额外的着色器代码||||对于非不透明相交候选，执行着色器代码来确定是否发生命中]
			射线最近命中判定：：：：实现必须追踪最近的确认命中，指导所有几何图形都经过测试并确认或删除；一旦确认第一次命中，射线追踪就会终止
			射线结果确定
				通过射线最近命中判定确定了最近命中结果，发生最近命中，否则最终结果为未命中；
		35、 光线追踪：：：：光线最终管道中不同着色器阶段之间的交互
				Ray Generation -> Acceleration Structure Traversal[-> Intersection -> Any-Hit ->] -> Hit(?Closest Hit:Miss)
			着色器调用指令
				创建一个或多个执行不同着色器阶段的调用来导致执行在其他地方继续
				可编程光线追踪着色器阶段允许子组操作，但是着色器调用指令对执行该指令的动态实例的子组指令或子组范围指令的结果可能有效的位置设置了限制；
			光线追踪命令
				光线追踪命令会引发关系概念追踪管道中的工作，光线追踪命令会记录到命令缓冲区，当由队列执行时，会产生根据当前绑定的关系概念追踪管道执行的工作；关系概念追踪骨干到必须先绑定到命令缓冲区，之后才能将任何关系概念追踪命令记录到该命令缓冲区中；
			着色器绑定表
				建立了光线追踪管道与为光线追踪管道构建的加速结构之间的关系；知识对加速结构中的每个几何体进行操作的着色器；包含每个着色器访问的资源，包括纹理索引、缓冲设备地址和常量；VKBuffer对象进行分配和管理
					索引规则：光线生成着色器[Ray Generation Shaders]、命中着色器[Hit Shaders]、Miss Shaders、可调用着色器[可执行多个可调用着色器]
			光线追踪管道堆栈
				光线追踪管道具有一组可能很大的着色器，这些着色器可能会在各种调用链组合中被调用来执行光线追踪。为了存储给定着色器执行的参数，实现可以使用内存中的数据堆栈。此堆栈的大小必须等于应用程序执行的任何调用链中所有着色器的堆栈大小之和。
			光线追踪捕获重放----
				rayTracingPipelineShaderGroupHandleCaptureReplay，vkGetRayTracingCaptureReplayShaderGroupHandlesKHR，VkRayTracingShaderGroupCreateInfoKHR ::pShaderGroupCaptureReplayHandle
		36、 视频编码
			H.264 / H.265 / AV1
				可会公开一个或多个支持视频编码操作的队列系列；
			视频
				视频图片资源 - 解码图片缓冲区
				视频配置文件 / 视频配置文件兼容性
				视频功能
				视频会话参数
				视频编码范围
				视频编码控制
				视频价码操作
				视频编码操作
				视频编码速率控制
			内联查询
		37、 扩展Vulkan：：：：可通过新的扩展或核心的新版本或在某些情况下扩展的新版本将新功能添加到Vulkan
			实例和设备功能：：：：枚举实例属性或接受VkInstance对象作为参数的命令被视为实例级功能
			核心版本：：版本更新，增加新功能
				版本号、查询版本支持
			层：启用某个层时，将自身插入到该层感情去的Vulkan命令的调用链中；层可用于多种任务，将Vulakn的基本行为扩展至规范要求的范围外{调用记录、跟踪、验证或提供其他扩展}
				设备层弃用、
			扩展：：扩展可能会定义新的Vulkan命令、结构和枚举
				实例扩展、设备扩展
			扩展依赖性：：扩展依赖于其他扩展或特定的核心API版本才能运行
			兼容性保证：：非正式，对Vulkan API的实现没有约束性责任
				核心版本{主要版本、次要版本和补丁版本都提供不同的兼容性保证}
				扩展：：
		38、 功能(Features)：功能要求
			新核心版本可能会为从扩展中提升的共嗯那个引入新的同一功能结构
		39、 限制：限制要求
			限制是与实现相关的最小值、最大值以及应用程序可能需要注意的其他设备特性：每个扩展都应引入一个新的限制结构；
				所需的最小/最大限制；限制对应于可选的细粒度设备功能
		40、 格式：：：：格式定义、格式属性、所需的格式支持
		41、 附加功能：：：：
			附加图像功能--额外的图像功能，例如某些图像类型的更大尺寸或额外样本数，或 线性平铺格式图像的额外功能
				支持的样本数量、基于图像类型的允许范围值
			附加缓冲区功能
				查询缓冲区支持的外部句柄类型
			可选信号量功能
				信号量可能支持将其有效负载导入和导出到外部句柄；要查询信号量支持的外部句柄类型；
			可选Fence功能
				fence可能支持将其有效负载导入和导出到外部句柄；查询隔离支持的外部句柄类型
			时间戳校准功能
				查询物理设备支持时间戳校准的时间域集；
		42、 调试--调试扩展(外部调试器或分析器结合使用)
			框架边界：：{VkFraneBoundaryEXT}
		附录：
			1、 SPIR-V 的Vulkan环境
			2、 内存模型
			3、 压缩图像格式
			4、 核心修订
			5、 层和扩展
			6、 API样板
			7、 不变性
			8、 字典

2、 Using Vulkan

3、 When and why to use Extensions

4、 Contributing

5、 License

6、 Code of conduct